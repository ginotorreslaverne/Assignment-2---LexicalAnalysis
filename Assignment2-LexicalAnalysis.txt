// -----------------------------------------------------------------------------------------------------------------------
//                                               Name(s) Gino Torres, 
//                                               Course CMPS 455, Fall 2024
//                                               Assignment Assignment 2 - LexicalAnalyzer
//                                               Due date September/19/2024
// Purpose: 
/* 
I attached a simple computer language grammar to this assignment.

Please complete the lexical analyzer of your compiler, just as I talked in classroom, you only need to define the pattern and corresponding actions. Please reference the sample in slide.
*/
//------------------------------------------------------------------------------------------------------------------------

// Comments: skip
"//".*                                                   /* { /* skip comment */ } */

// Keywords: print KEYWORD
"int"|"real"|"if"|"then"|"else"|"while"                  /* { printf("KEYWORD: %s\n", yytext); } */

// Identifiers: print IDENTIFIER with value
[a-zA-Z][a-zA-Z0-9]{0,63}                                /* { yylval.sval = strdup(yytext); printf("IDENTIFIER: %s\n", yylval.sval); } */

// Operators: print OPERATOR
(==|<=|>=|!=|=|<|>|!|\+|-|\*|\/)                         /* { printf("OPERATOR: %s\n", yytext); } */

// Delimiters: print DELIMITER
[(){};]                                                  /* { printf("DELIMITER: %s\n", yytext); } */

// Integers: print INT with value
[0-9]+                                                   /* { yylval.ival = atoi(yytext); printf("INT: %d\n", yylval.ival); } */

// Real numbers with exponent: print REAL with value
[0-9]+[eE][+-]?[0-9]+                                   /* { yylval.fval = atof(yytext); printf("REAL: %f\n", yylval.fval); } */

// Decimal point real numbers: print REAL
\.[0-9]+                                                 /* { yylval.fval = atof(yytext); printf("REAL: %f\n", yylval.fval); } */

// Full form real numbers: print REAL
[0-9]+\.[0-9]+([eE][+-]?[0-9]+)?                        /* { yylval.fval = atof(yytext); printf("REAL: %f\n", yylval.fval); } */
